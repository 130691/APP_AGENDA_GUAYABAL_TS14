import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from tkcalendar import DateEntry
import datetime


class AgendaApp:
    def __init__(self, root):
        self.root = root
        self.root.title("EL GUAYABAL")
        self.root.geometry("1000x600")
        # Cambiar imagen de icono con formato .ico
        self.root.iconbitmap('C:\\Users\\DELL-2020\\PycharmProjects\\IMAGEN ICONO\\GUAYABAL.ICO.ico')

        # Diseño de la Interfaz
        # Etiqueta para mostrar un texto descriptivo
        self.label = tk.Label(root, text="REGISTRO DE RESERVACIONES - EL GUAYABAL DISCOTEC")
        self.label.pack(
            fill=tk.BOTH,
        )

        # Frame para los campos de entrada
        self.entry_frame = ttk.Frame(self.root)
        self.entry_frame.pack(pady=30)

        # Selector de fecha
        self.date_label = ttk.Label(self.entry_frame, text="Fecha:")
        self.date_label.grid(row=0, column=0, padx=5, pady=5)
        self.date_entry = DateEntry(self.entry_frame, width=15, background='darkblue', foreground='white',
                                    borderwidth=2, date_pattern='y-mm-dd')
        self.date_entry.grid(row=0, column=1, padx=5, pady=5)

        # Selector de hora
        self.time_label = ttk.Label(self.entry_frame, text="Hora:")
        self.time_label.grid(row=0, column=2, padx=5, pady=5)
        self.time_label = ttk.Label(self.entry_frame, text="minutos:")
        self.time_label.grid(row=0, column=4, padx=5, pady=5)

        # Crear listas de opciones para horas y minutos (puedes personalizar según tus necesidades)
        hours = [str(i).zfill(2) for i in range(24)]
        minutes = [str(i).zfill(2) for i in range(60)]

        self.hour_combobox = ttk.Combobox(self.entry_frame, values=hours, width=5)
        self.hour_combobox.grid(row=0, column=3, padx=5, pady=5)

        self.minute_combobox = ttk.Combobox(self.entry_frame, values=minutes, width=5)
        self.minute_combobox.grid(row=0, column=5, padx=5, pady=5)

        # Campo de entrada para datos (apellidos y nombres)
        self.names_label = ttk.Label(self.entry_frame, text="Nombre:")
        self.names_label.grid(row=1, column=0, padx=5, pady=5)
        self.names_entry = ttk.Entry(self.entry_frame, width=50)
        self.names_entry.grid(row=1, column=1, columnspan=3, padx=5, pady=5)

        # Campo de entrada para la descripción (tipo de evento a celebrar)
        self.desc_label = ttk.Label(self.entry_frame, text="Descripción:")
        self.desc_label.grid(row=2, column=0, padx=5, pady=5)
        self.desc_entry = ttk.Entry(self.entry_frame, width=50)
        self.desc_entry.grid(row=2, column=1, columnspan=3, padx=5, pady=5)

        # Botón para agregar evento
        self.add_button = ttk.Button(self.entry_frame, text="Agregar Evento", command=self.add_event)
        self.add_button.grid(row=3, column=2, padx=5, pady=5)

        # Botón para eliminar evento seleccionado
        self.delete_button = ttk.Button(self.entry_frame, text="Eliminar Evento Seleccionado",
                                        command=self.delete_event)
        self.delete_button.grid(row=3, column=3, padx=5, pady=5)

        # TreeView para mostrar los eventos
        self.tree = ttk.Treeview(self.root, columns=("Apellidos y Nombres", "Descripción", "Fecha", "Hora", "minutos"), show="headings")
        self.tree.pack(pady=20)

        self.tree.heading("Apellidos y Nombres", text="Apellidos y Nombres")
        self.tree.heading("Descripción", text="Descripción")
        self.tree.heading("Fecha", text="Fecha")
        self.tree.heading("Hora", text="Hora")
        self.tree.heading("minutos", text="minuto")
        

        # Botón para salir de la aplicación
        self.exit_button = ttk.Button(self.root, text="Salir", command=self.root.quit)
        self.exit_button.pack(pady=5)

    def add_event(self):
        # Obtiene los valores de los campos de entrada
        name = self.names_entry.get()
        description = self.desc_entry.get()
        date = self.date_entry.get()
        hour = self.hour_combobox.get()
        minute = self.minute_combobox.get()

        # Añade el evento al TreeView
        self.tree.insert("", tk.END, values=(name, description, date, hour, minute))

        # Limpia los campos de entrada
        self.names_entry.delete(0, tk.END)
        self.desc_entry.delete(0, tk.END)
        self.date_entry.delete(0, tk.END)
        self.hour_combobox.set("")
        self.minute_combobox.set("")

    def delete_event(self):
        # Obtiene el evento seleccionado
        selected_item = self.tree.selection()[0]
        self.tree.delete(selected_item)


if __name__ == "__main__":
    root = tk.Tk()
    app = AgendaApp(root)
    root.mainloop()
